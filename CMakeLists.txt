cmake_minimum_required(VERSION 2.4)
PROJECT(SeedCore)
IF(WIN32)
	SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
	LINK_DIRECTORIES(${PROJECT_BINARY_DIR}/windows)
	set(CMAKE_C_FLAGS_DEBUG_INIT "/D_DEBUG /MTd /Zm2000 /Zi /Ob0 /Od /RTC1") 
	SET(CMAKE_C_FLAGS_MINSIZEREL_INIT "/MT /Zm2000 /O1 /Ob1 /D NDEBUG")
	SET(CMAKE_C_FLAGS_RELEASE_INIT "/MT /Zm2000 /O2 /Ob2 /D NDEBUG")
	SET(CMAKE_C_FLAGS_RELWITHDEBINFO_INIT "/MT /Zm2000 /Zi /O2 /Ob1 /D NDEBUG")
	SET(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/windows/")
	MESSAGE(STATUS "WINDOWS")
	IF(CMAKE_CL_64)
		MESSAGE(STATUS "x64")
	ELSE()
		MESSAGE(STATUS "x86")
	ENDIF(CMAKE_CL_64)
ENDIF(WIN32)

IF(LINUX)
	SET(LIBRARY_OUTPUT_PATH "${PROJECT_BINARY_DIR}/linux")
	LINK_DIRECTORIES("${PROJECT_BINARY_DIR}/linux")
	SET(CMAKE_C_FLAGS "-fPIC")
	SET(CMAKE_CXX_FLAGS " -std=c++11 -Wall -Werror -Wno-error=unused-variable  -fexceptions -fnon-call-exceptions ")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DLINUX -pthread -rdynamic -ldl -lrt -Wl,-rpath,./ -Wl,-rpath-link,${PROJECT_BINARY_DIR}/linux/")
	SET(CMAKE_CXX_FLAGS_DEBUG "-D_DEBUG -g -O -pg -L${PROJECT_SOURCE_DIR}/Thridlibrary/linux/")
	SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-g -O2 -L${PROJECT_SOURCE_DIR}/Thridlibrary/linux/")
	SET(CMAKE_CXX_FLAGS_RELEASE "-O3 -L${PROJECT_SOURCE_DIR}/Thridlibrary/linux/")
	MESSAGE(STATUS "Linux")
ENDIF(LINUX)


SET(THIRDLIBRARY_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/Thridlibrary/include")
IF(WIN32)
SET(THIRD_LIBRARIES_DEBUG_DIR
	"${PROJECT_SOURCE_DIR}/Thridlibrary/windows/debug"
)
SET(THIRD_LIBRARIES_RELEASE_DIR
	"${PROJECT_SOURCE_DIR}/Thridlibrary/windows/release"
)

SET(OBJECT_LIBD
	debug "${PROJECT_BINARY_DIR}/windows/debug/ObjectMgr.lib"
)
SET(OBJECT_LIB
	optimized "${PROJECT_BINARY_DIR}/windows/Release/ObjectMgr.lib"
)

SET(KERNEL_LIBD
	debug "${THIRD_LIBRARIES_DEBUG_DIR}/GridSeed.lib"
)

SET(KERNEL_LIB
	optimized "${THIRD_LIBRARIES_RELEASE_DIR}/GridSeed.lib"
)


ENDIF(WIN32)

IF(LINUX)
SET(THIRD_LIBRARIES_DEBUG_DIR
	"${PROJECT_SOURCE_DIR}/Thridlibrary/linux"
)
SET(THIRD_LIBRARIES_RELEASE_DIR
	"${PROJECT_SOURCE_DIR}/Thridlibrary/linux"
)

SET(OBJECT_LIBD
	debug "${PROJECT_BINARY_DIR}/linux/libObjectMgr.so"
)
SET(OBJECT_LIB
	optimized "${PROJECT_BINARY_DIR}/linux/libObjectMgr.so"
)

SET(KERNEL_LIBD
)
SET(KERNEL_LIB
)

ENDIF(LINUX)

SET(API_DIR
	"${THIRDLIBRARY_INCLUDE_DIR}/GridSeed/include"
)
SET( API
	"${API_DIR}/IKernel.h"
	"${API_DIR}/IModule.h"	
)

SET(PUBLIC_DIR
	"${PROJECT_SOURCE_DIR}/Public"
)
file(GLOB PUBLIC ${PUBLIC_DIR}/*.cpp ${PUBLIC_DIR}/*.h)
SET(TINYXML_DIR
	"${PUBLIC_DIR}/tinyxml2"
)
FILE(GLOB_RECURSE TINYXML ${TINYXML_DIR}/*.*)
SET(2D_DIR
	"${PUBLIC_DIR}/2D"
)
SET(2D
	"${2D_DIR}/Zone.h"
	"${2D_DIR}/Vector.h"
)

SET(COMMON_TIME_DIR "${PUBLIC_DIR}/time/")
FILE(GLOB_RECURSE COMMON_TIME ${COMMON_TIME_DIR}/*)

MESSAGE(STATUS ${PUBLIC})

SET(THIRD_LIBRARIES_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/Thridlibrary/include")
ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/logic/)